Esta presentación está a cargo del Stanford Center for Professional Development. Aquí está en pocas palabras una versión reducida de lo que se presenta en la mano también. Este es el programa de estudios.. Tengo varios idiomas que voy a poner en el tablero en sólo M1 concepto. C ensamblaje C++ programación concurrente. Ese no es un lenguaje que es sólo un paradigma. Voy a cubrir Python de ahora en adelante en 107. La gente mira esto y dicen, vaya, voy a ser capaz de poner legítimamente todos estos idiomas en mi currículum. Esta coma es una lista en la parte inferior y se siente muy bien. No se trata tanto de eso.. Ciertamente queremos darle un poco de kilometraje en algunos idiomas muy relevantes que son muy buenos tanto para la investigación como para la industria. El verdadero valor intelectual en el aprendizaje de todas estas lenguas es estudiar realmente los paradigmas que representan. Te explicaré lo que eso significa en un segundo.. Pero programar en C o C++ es en realidad casi un proceso de pensamiento diferente de lo que eres cuando programas en esquema o en Python. Todos ustedes saben suficiente C++ y lo crean o no ya saben mucho de C. Sólo tienes que sacar la orientación del objeto de C++ y te queda más o menos con C. Cuando usted programa en C, usted no tiene clases. Eres muy orientado al procedimiento.. Usted piensa en la función principal como un perfil de alto nivel de tal vez cinco funciones de nivel superior a llamar y esas cinco funciones tienen sub funciones y esas sub funciones tienen sub funciones, etc. Tiene sentido.. Es como un bosquejo para la historia.. Lo que esbozó notas para la clase de historia donde tienes romano número uno y principal y romano número dos y principal y romano número tres y principal y tienes pequeño A y B y tienen poco A y cosas así. ¿Entiendes a lo que me refiero?. Programa con efectos secundarios. Usted pasa alrededor de referencias y punteros con la idea de actualizar los datos compartidos. Lo haces tanto en C como en C++, pero en lo que a C se refiere, esto representa lo que se llama el paradigma procesal.. También se oye que se llama el paradigma imperativo. Es verbo orientado en el sentido de que lo primero que ves o haces normalmente ver con una declaración es la función llamada donde el nombre de la función es generalmente tiene algún verbo fuerte en él por lo que le da algunas ideas a lo que la función se supone que debe lograr. ¿Tiene sentido para la gente? Cuando estudiaste C++ y de repente en lugar de llamar hacer esto y pasar la dirección de algún objeto, haces mi flecha de objeto hacer esto. Entonces, de repente, lo primero que ves en esa línea es los datos o el objeto que está siendo manipulado y porque lo primero que ves es el objeto, es por eso que está orientado al objeto en lugar de orientado al procedimiento. Eso tiene sentido para la gente.. Creo que muchos programadores de C++ realmente programan en C y, por cierto, utilizan los objetos en las clases que están disponibles para ellos, que es una forma perfectamente razonable de programar. La mayoría de la gente aprende a tener un programa en C. La mayoría de la gente que conozco en la industria sabe C muy, muy bien y a pesar del hecho de que hay 50 millones de idiomas más nuevos que son mejores en muchos aspectos, todavía se adhieren a lo que saben y es por eso que C y C++ siguen siendo idiomas tan populares. No hay nada de malo en la programación en C si realmente lo sabes muy bien y escribes código legible limpio. Es más difícil.. Lo siento, digamos que es mucho más fácil hacer errores de memoria en C porque todo está expuesto y hay muy poco error comprobar y seguir adelante. C++ es un poco mejor al respecto. En el medio de aquí tengo esta cosa llamada asamblea. No he decidido si voy a ir con lo que he ido con durante los últimos siete u ocho años, que es este lenguaje de asamblea simulado o voy a dar un paso y enseñarte un verdadero, no quiero decir que es, es un lenguaje de asamblea real aunque no lo ves como en uso mucho. Pero hay un lenguaje de montaje llamado MIPS que es muy fácil en cuanto a los idiomas de montaje van a aprender. Realmente no me importa tanto enseñar cómo programar una asamblea.. Lo uso como un vehículo para mostrarte cómo los programas C y C++ se compilan a .O y los archivos objeto en binarios y eventualmente se convierten en ejecutables y te muestran cómo una línea como i es igual a siete o j++ o foo de x e y como una llamada de función, cómo todo eso se traduce a código de ensamblaje. ¿Tiene sentido? Sabes que cuando escribes código C++, cuando ejecutas el programa ya no es C++, es código de ensamblaje. Es todo ceros y unos eventualmente. Quiero darles una idea de cómo C se traduce al código de ensamblaje, cómo todas las variables y sus funciones y sus objetos y todo eso eventualmente se reduce y se ha reducido a una colección de ceros y unos. Y quiero hacer un poco de lo mismo para C++. Resulta que bien C++ y C representan diferentes paradigmas que realmente todos todavía compilar a ceros y unos. Y después de obtener suficiente experiencia con el montaje y el proceso de compilación manual que vamos a aprender sobre es cómo mirar el código C y averiguar cómo sería el código de montaje. Realmente vamos a ver que C++ y C casi parecen el mismo lenguaje en lo que se refiere a los ceros y unos. Realmente vamos a extender el modelo de compilación que usamos para ir de C a ensamblaje para acomodar referencias y clases de C++ y plantillas y cosas así que son nuevas para el lenguaje en comparación con C. Y usted tiene una, creo que una muy, muy buena comprensión de cómo C y C++ funcionan después de las primeras cinco semanas del curso. Te hace mucho mejor un programa C y C++ donde vamos a desmitificar todo esto del puntero. Voy a ser capaz de hacer algo como asterisco, asterisco, amperisco, asterisco, asterisco, flecha p, asterisco, asterisco, asterisco, asterisco, asterisco, igual a siete. Y vas a saber exactamente lo que significa. Y por lo que se necesita un poco de trabajo y es casi risible lo arbitrario que puede ser con todos sus yeso y sus amperands y su asterisco. Pero si se compila, significa algo. Así que cuando se ejecuta, en realidad hace algo. Probablemente no es bueno si tienes un montón de asterisco y ampersands. Y a menos que puedas tener alguna idea de por qué está aplastando, no sólo que está aplastando. Gasto una buena cantidad de energía hablando de programación concurrente. En realidad, por el momento, hacemos ese tipo de programación en C. Pero todos los programas que has escrito en los últimos dos trimestres, si acabas de tomar los cursos 106a y 106b aquí, son 106x. Todos los programas que has escrito en Stanford antes de 107 han sido programas secuenciales, lo que significa que, ya sea orientado a objetos o imperativos, o orientado a procedimientos, tienes este esquema de pasos que suceden uno tras otro. Nada se hace en paralelo o tubería o aturdimiento lado a lado. Todo sucede en un flujo limpio de instrucciones. Bueno, de lo que se trata la programación concurrente es dentro de un solo programa, tratando de obtener dos funciones para aparentemente ejecutar simultáneamente. Y si puedes obtener dos funciones que aparentemente se ejecutan simultáneamente, entonces puedes extender y obtener 10 funciones que se ejecutan simultáneamente, o 20 funciones que se ejecutan simultáneamente, o aparentemente simultáneamente, lo digo de esa manera porque técnicamente no se ejecutan al mismo tiempo. Cuando repaso el código de ensamblaje, y creo que puedes intuir lo suficiente sobre cómo es el código de ensamblaje, pero si tienes esta función, mi mano es una función, esta mano es otra función. Y te preocupas por la ejecución de uno de ellos.. Entonces, cuando haga esto, puedes pensar en leer el código y ejecutarlo para efectos secundarios.. Eso tiene sentido para la gente.. Cuando haces con la programación concurrente, tienes dos o más funciones, sólo dos aquí, porque sólo tengo dos manos, para hacer esto, y ambos aparentemente se ejecutan al mismo tiempo. Pero lo que realmente sucede es que es como ver dos películas al mismo tiempo, donde porque sólo hay un procesador en la mayoría de las máquinas, realmente no funciona así, se ejecuta así, y cambia de ida y vuelta entre las dos funciones. Pero ha pasado tan rápido que no puedes ver la diferencia.. Son más de 24 fotogramas por segundo.. Es como un millón.. Y estás viendo dos películas al mismo tiempo.. Y eso se extiende sólo multa a tres a cinco a 10 a 100 en teoría. Muchas situaciones en las que la programación concurrente no es realmente muy útil, pero hay varias situaciones, particularmente la creación de redes, cuando eso está involucrado, donde la programación concurrente es realmente muy útil. Hay algunos problemas que surgen cuando se trata de la programación concurrente que no se puede pensar en. El ejemplo que siempre voy sobre el primer día de clase es sólo que utiliza dos Wells Fargo cajeros automáticos. Piensa que tienes una cuenta corriente Wells Fargo.. Puede que no pienses en ello porque probablemente lo hagas.. Así que imagine que su cuenta de cheques está en peligro porque dos personas están usando cajeros automáticos, y usted tiene $100 en él. Y compartes tu pin con tu mejor amigo y subes a los cajeros automáticos vecinos, y haces el mayor progreso posible para retirar esos $100, y luego ambos a la cuenta de tres presionan OK para tratar de conseguir $200 colectivamente. ¿Tiene eso sentido? Eso no es un ejemplo sin sentido porque ambas máquinas son básicamente computadoras muy simples. Que en última instancia necesita acceso, el mismo saldo de la cuenta principal, para confirmar que $100 está disponible, y de esta manera transaccional, transaccional tiene sentido tanto en términos de dinero y también en el sentido de programación concurrente. Usted tiene que asegurarse de que los $100 que se identifica como el saldo de la cuenta se mantiene con un cierto sabor atómico para que si usted tiene dos personas tratando de retirar $100 al mismo tiempo, que sólo una persona se sale con la suya. Ese saldo de cuenta de $100 es el recurso compartido que dos procesos diferentes tienen acceso a. ¿Tiene eso sentido para la gente? Así que tiene que haber directivas que se ponen en marcha para asegurarse de que la comprobación del saldo de la cuenta y la retirada se hacen básicamente o no en absoluto o en su totalidad para que realmente funciona realmente como una transacción, tanto en el sentido financiero y la programación concurrente. Si eres descuidado al respecto, y no lo es, quiero decir descuidado, eso no es una cosa muy agradable para decir en el primer día. Si usted no tiene cuidado sobre cómo usted realmente programa el uso, si programa al mismo tiempo, usted realmente puede llegar con problemas y tienen estos problemas de integridad de datos, que los bancos están realmente muy, muy preocupados, obviamente no quieren dar $ 10 millones cuando sólo tienen un millón de dólares. Lo mismo con las aerolíneas. Si tienen un asiento restante en un vuelo y dos personas llaman y tratan de conseguir ese asiento, sólo querrán dárselo a una persona. Ahora parece que no les importa la programación concurrente porque están más que felices de darte un asiento que no existe en el plano. Pero los problemas de la aerolínea probablemente no están relacionados con la programación concurrente. En lo que respecta al esquema y a Python, una vez que pasamos a través de la programación concurrente, realmente cambiamos de marcha y empezamos a mirar este lenguaje llamado esquema. Puede que no hayas oído hablar de esto.. Si usted no ha oído hablar de esto, usted puede haber oído hablar de un idioma llamado Lisp, que sin duda está relacionado con. Este es un representante de lo que se llama el paradigma funcional. Hay dos cosas sobre esquema y lenguajes funcionales, lenguajes puramente funcionales que son interesantes en contraste con CNC++. Cuando programa usando el paradigma funcional, siempre confía en el valor de retorno de una función para avanzar. Y tú programas sin efectos secundarios.. Eso es algo muy raro de escuchar como una expresión cuando sólo has codificado durante un año.. Pero cuando se codifica en CNC++, es muy a menudo todo acerca de efectos secundarios. El valor de retorno no siempre te dice mucho. Es un número o es booleano.. Pero cuando se pasa en una estructura de datos por referencia a una función y se actualiza para que cuando la función vuelve, la estructura de datos original se ha cambiado. ¿Eso tiene sentido? Eso es programar por efecto secundario.. Bueno, la idea con el esquema, y particularmente el paradigma funcional, es que no se programa con efectos secundarios. No tienes eso en absoluto, que siempre sintetizas los resultados o resultados parciales que se convierten en resultados parciales más grandes que eventualmente se convierten en el resultado en el que estás interesado. Y sólo entonces se le permite imprimirlo en la pantalla para ver cuál fue la respuesta al problema. Es muy difícil explicar el esquema si nunca lo habías visto antes en un segmento de cinco minutos de una introducción completa.. Pero cuando llegas allí, tenemos toneladas de ejemplos del paradigma. Es un lenguaje muy divertido y limpio en el que trabajar.. Creo que es el lenguaje más fácil de los cuatro porque es un lenguaje tan pequeño.. Una vez que usted consigue el paradigma abajo y usted entiende cómo programar funcionalmente, esquema no es tan malo en absoluto. En realidad es muy divertido.. No es que toda la programación sea divertida, pero el esquema es particularmente divertido.. Ahora, solía enseñar o algún C++ avanzado o más recientemente algún Java hacia el final del curso. El último trimestre, decidí literalmente en la octava semana que no iba a hacer Java porque 108 es todo sobre Java, y sentí que estaba robando el trueno de 108. Así que acabo de decir, ¿sabes qué? Voy a enseñar a Python. Veamos cómo funciona.. Y lo convertí en el trabajo bastante bien, ciertamente considerando que nunca lo había enseñado antes.. Pero este lenguaje llamado Python, sospecho que la mayoría de la gente ha oído hablar de él, incluso si nunca lo han visto, parece ser el lenguaje de la rabia en un montón de compañías significativas en el Área de la Bahía. Son personas muy inteligentes de estas empresas.. Así que cuando usan el lenguaje y les gusta, por lo general hay una muy buena razón para que les guste. Probablemente has oído hablar de un lenguaje llamado Pearl.. No es un lenguaje muy bonito.. Puedes pensar en algún sentido, Python siendo una versión más moderna y orientada a objetos de Pearl.. No lo sé, Pearl, no conoces a Python.. No significa nada para ti.. Pero sólo entiende que este es el pequeño lenguaje sexy que ha existido durante probablemente 16, 17 años, que realmente se ha establecido como un idioma popular desde el año 2000, 2001. Conozco a mucha gente que trabaja en Google ese programa en Python a diario.. Hay un subconjunto de nosotros en Facebook, el programa en Python todos los días, haciendo un montón de trabajo de sistemas distribuidos, y sólo Python parece ser la forma de hacerlo allí mismo.. En realidad tiene un montón de buenas bibliotecas para hacer frente a la programación web. La programación web puede parecer muy aburrida para mucha gente porque parece que es HTML y páginas web y cosas así.. La programación web real es más sofisticada que eso. Genera páginas web dinámicas basadas en contenido y bases de datos y cosas por el estilo. Y Python siendo un lenguaje de scripting, lo que significa que es interpretado y algo así, puedes escribir cosas a medida que vas y reconoce y lee y ejecuta las cosas a medida que escribes. Es muy bueno para ese tipo de cosas y si todo va bien, lo que significa que tengo tiempo para desarrollar esta tarea que tengo, esta idea de asignación que tengo, vas a escribir un pequeño servidor web dinámico miniatura en Python para tu proyecto final. No será sofisticado.. No vas a escribir todo Apache, pero probablemente vas a escribir una pequeña cosa en la que realmente tienes un servidor web entre bastidores, tomando decisiones sobre cómo construir una página HTML y servirla a un cliente. Así que será una oportunidad para aprender Python, para aprender sus bibliotecas, para ver que como un idioma porque es bastante joven, tiene la ventaja de no molestarse en incluir los errores de C y C++ y Java. Así que dice, no, voy a dejar esa parte y voy a ir con este núcleo más interesante, bien formado. Tiene grandes bibliotecas. Tiene orientación de objeto. Puedes programar, de forma procedimental si quieres y simplemente programar como si estuvieras en C usando la sintaxis de Python. Incluso hay aspectos de programación funcional en el idioma. Así que a pesar de que la sintaxis es diferente del esquema, conceptualmente se puede utilizar esquema como ideas en código Python si quieres. Voy a ser capaz de ilustrar el paradigma del servidor cliente y cómo es diferente de la programación tradicional. Eso no es tanto una cosa de Python, pero Python es un buen vehículo para aprender esa cosa. Te mostraré la biblioteca para que puedas analizar XML y HTML y puedas entender el protocolo HTTP y todas estas cosas y sólo para leer blogs, para descargar archivos RSS, todas estas cosas que son muy, muy graciosamente manejadas por los programas de Python. Así que ahí es donde espero llevar a la gente para la semana 10 del curso.. ¿Eso tiene sentido?. Hay algunos otros paradigmas que no están representados aquí, pero creo que realmente cubro todos los que es probable que veas durante los próximos 15 años si sales en tu repelente. Hay un par de idiomas que puedo mencionar brevemente en el último día que son simplemente divertidos, pero todos tienen alguna superposición con algún lenguaje que está representado aquí. ¿Están bien?. Así que no me gusta empezar con ningún material real cuando sólo me quedan 10 minutos, así que en realidad voy a dejarte ir. Pero reconozco que el viernes, voy a tener toneladas de limosnas para ti. Voy a tener una misión.. De acuerdo.. Vamos a sumergirnos en el material puntero de bajo nivel de CNC++. Que tengas una buena semana.. ¿De acuerdo?